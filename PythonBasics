#the most basic line sof script that you can even execute all of sudden
print("Hello World")

#Python has indendation based scoping
if True:
    print("This is true")
    if False:
        print("This won't be printed")  
    else:
        print("This is false")

#if 5 > 2:
#print("Five is greater than two!")  # This will raise an IndentationError 

#You can use comments using the # symbol
#This is a single line comment
"""Multi-line comments can be created using triple quotes like this one
This is a comment
written in
more than just one line
"""

#You can use variables without declaring them
x = 5
y = 10
z = x + y
print(z)

#You can use different data types casting using the type name as a function
#type conversion and casting are one and the same in Python
x = str(3)    # x will be '3'
y = int(3)    # y will be 3
z = float(3)  # z will be 3.0


#Variable names are case-sensitive and can include letters, numbers, and underscores
#but cannot start with a number and cannot be a reserved keyword
#Examples of valid variable names
a = 4
A = "Sally"
#A will not overwrite a

#example of assigning multiple variables at once
x, y, z = "Orange", "Banana", "Cherry"
print(x)
print(y)
print(z)

#you also unpack multiple values from a list or tuple at once
fruits = ["apple", "banana", "cherry"]
x, y, z = fruits
print(x)
print(y)
print(z)

#You can use the global keyword to modify a global variable inside a function
x = "awesome"
def myfunc():
  global x
  x = "fantastic" #x is overwritten here with fantastic and becomes globally available throughout the script

myfunc()                
print("Python is " + x) # prints Python is fantastic

#You can define functions using the def keyword
def add(a, b):
    return a + b
result = add(3, 4)
print(result)

#You can define classes using the class keyword
class Dog:
    def __init__(self, name):
        self.name = name

    def bark(self):
        return "Woof!"
    
my_dog = Dog("Fido")
print(my_dog.name)  # prints Fido
print(my_dog.bark()) # prints Woof!

#You can use string methods
a = "Hello, World!"
print(len(a))  # prints 13
print(a.lower())  # prints hello, world!
print(a.upper())  # prints HELLO, WORLD!
print(a.replace("H", "J"))  # prints Jello, World!

#You can use lists and dictionaries
a = "Hello, World!"
print(a[1])  # prints e

b = "Hello, World!"
print(b[2:5])  # prints llo
print(b.split(","))  # prints ['Hello', ' World!']
print(b.strip())  # prints Hello, World!
print(b.startswith("Hello"))  # prints True
print(b.endswith("!"))  # prints True       
print(b.find("World"))  # prints 7
print(b.count("l"))  # prints 3
print(b.isalpha())  # prints False
print(b.isdigit())  # prints False
print(b.islower())  # prints False
print(b.isupper())  # prints False  
print(b.isspace())  # prints False
print(b.title())  # prints Hello, World!
print(b.capitalize())  # prints Hello, world!
print(b.center(50))  # prints the string centered in a field of 50 characters
print(b.encode())  # prints b'Hello, World!'
print(b.format())  # prints Hello, World!
print(b.index("World"))  # prints 7 
print(b.partition(","))  # prints ('Hello', ',', ' World!')
print(b.rfind("o"))  # prints 8 
print(b.rindex("o"))  # prints 8
print(b.rpartition(","))  # prints ('Hello', ',', ' World!')
print(b.rsplit(","))  # prints ['Hello', ' World!']
print(b.zfill(20))  # prints 0000000000Hello, World!    

my_list = [1, 2, 3, 4, 5]   
print(my_list[0])  # prints 1

thislist = ["apple", "banana", "cherry"]
tropical = ["mango", "pineapple", "papaya"]

thislist.extend(tropical)

print(thislist)

my_dict = {"name": "Alice", "age": 30}
print(my_dict["name"])  # prints Alice

#You can use loops and conditionals
txt = "The best things in life are free!"
print("free" in txt, print("Yes, 'free' is present.") if "free" in txt else print("No, 'free' is not present."))

#You can use f-strings for formatted strings 
age = 36
txt = f"My name is John, I am {age}"
print(txt)  # prints My name is John, I am 36

#You can use the match-case statement
day = 4 # Thursday
match day:
  case 1:
    print("Monday")
  case 2:
    print("Tuesday")
  case 3:
    print("Wednesday")
  case 4:
    print("Thursday")
  case 5:
    print("Friday")
  case 6:
    print("Saturday")
  case 7:
    print("Sunday")

# Reverse a string without using [::-1]
def reverse_string(s):
    rev = ""
    for char in s:
        rev = char + rev
    return rev

print(reverse_string("AI Engineering"))  # prints gnireenignE IA